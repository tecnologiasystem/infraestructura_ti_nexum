from __future__ import annotations

import sys
from collections.abc import Callable
from typing import TypeVar
from warnings import warn

from ._core._eventloop import get_async_backend
from .abc import CapacityLimiter

if sys.version_info >= (3, 11):
    from typing import TypeVarTuple, Unpack
else:
    from typing_extensions import TypeVarTuple, Unpack

T_Retval = TypeVar("T_Retval")
PosArgsT = TypeVarTuple("PosArgsT")


async def run_sync(
    func: Callable[[Unpack[PosArgsT]], T_Retval],
    *args: Unpack[PosArgsT],
    abandon_on_cancel: bool = False,
    cancellable: bool | None = None,
    limiter: CapacityLimiter | None = None,
) -> T_Retval:
    """
    """
    """
    Ejecuta la función `func` con los argumentos `args` en un hilo worker separado.

    Parámetros:
    - func: función a ejecutar en el hilo.
    - args: argumentos posicionales para la función.
    - abandon_on_cancel: si es True, en caso de que la tarea principal se cancele,
      el hilo worker sigue corriendo libre y se abandona el resultado.
      Si es False, ignora la cancelación hasta terminar el hilo.
    - cancellable: parámetro obsoleto que hace lo mismo que `abandon_on_cancel`.
      Si se pasa, sobreescribe `abandon_on_cancel`.
    - limiter: opcional, limita el número de hilos simultáneos.

    Retorna:
    - El resultado de la función `func` si se ejecuta correctamente.

    Comportamiento:
    - Llama internamente al backend async para ejecutar en un hilo worker.
    - Si se usa `cancellable` (obsoleto), muestra una advertencia.

    """
    if cancellable is not None:
        abandon_on_cancel = cancellable
        warn(
            "The `cancellable=` keyword argument to `anyio.to_thread.run_sync` is "
            "deprecated since AnyIO 4.1.0; use `abandon_on_cancel=` instead",
            DeprecationWarning,
            stacklevel=2,
        )

    return await get_async_backend().run_sync_in_worker_thread(
        func, args, abandon_on_cancel=abandon_on_cancel, limiter=limiter
    )


def current_default_thread_limiter() -> CapacityLimiter:
    """
    Devuelve el limitador por defecto para la cantidad de hilos worker concurrentes.

    Esto previene que se saturen los recursos creando demasiados hilos a la vez.

    Retorna:
    - Un objeto CapacityLimiter configurado por el backend async.

    """
    return get_async_backend().current_default_thread_limiter()

